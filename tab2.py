from tkinter import *
from tkinter import ttk, messagebox
from basicsql import *

class ProductTab(Frame):
    def __init__(self, parent, sales_tab=None, dashboard_tab=None, profit_tab=None):
        super().__init__(parent)
        self.pack(fill=BOTH, expand=True)
        
        # Reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        self.sales_tab = sales_tab
        self.dashboard_tab = dashboard_tab
        self.profit_tab = profit_tab
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        self.v_barcode2 = StringVar()
        self.v_title2 = StringVar()
        self.v_price2 = StringVar()
        self.v_cost2 = StringVar()
        self.v_quantity2 = StringVar()
        self.v_unit2 = StringVar()
        self.v_category2 = StringVar()
        self.v_reorder_point2 = StringVar()
        
        # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.v_unit2.set('‡∏ä‡∏¥‡πâ‡∏ô')
        self.v_category2.set('fruit')
        self.v_reorder_point2.set('5')
        
        # ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        self.edit_mode = False
        self.current_barcode = None
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
        self.create_widgets()
        
    def create_widgets(self):
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title_label = Label(self, text='‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', font=('Arial', 18, 'bold'))
        title_label.pack(pady=10)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á main container
        main_container = Frame(self)
        main_container.pack(fill=BOTH, expand=True, padx=20, pady=10)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (65% ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)
        left_frame = Frame(main_container, bg='white', relief=RIDGE, bd=1)
        left_frame.pack(side=LEFT, fill=BOTH, expand=True, padx=(0, 10))
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (35% ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)
        right_frame = Frame(main_container, bg='#f0f0f0', relief=RIDGE, bd=1, width=350)
        right_frame.pack(side=RIGHT, fill=Y, padx=(10, 0))
        right_frame.pack_propagate(False)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        self.create_product_table(left_frame)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤
        self.create_product_form(right_frame)
        
    def create_product_table(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        table_title = Label(parent, text='‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', font=('Arial', 14, 'bold'), bg='white')
        table_title.pack(pady=10)
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞ scrollbar
        table_frame = Frame(parent, bg='white')
        table_frame.pack(fill=BOTH, expand=True, padx=10, pady=(0, 10))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview
        product_header = ['Barcode', '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô', '‡∏™‡∏ï‡πá‡∏≠‡∏Å', '‡∏´‡∏ô‡πà‡∏ß‡∏¢', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 'Reorder']
        product_width = [90, 150, 80, 80, 60, 70, 90, 70]
        
        self.table_product = ttk.Treeview(table_frame, columns=product_header, 
                                         show='headings', height=18)
        
        for hd, w in zip(product_header, product_width):
            self.table_product.heading(hd, text=hd)
            self.table_product.column(hd, width=w, anchor='center')
            
        self.table_product.column('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', anchor='w')
        self.table_product.column('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢', anchor='e')
        self.table_product.column('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô', anchor='e')
        self.table_product.column('‡∏™‡∏ï‡πá‡∏≠‡∏Å', anchor='e')
        self.table_product.column('Reorder', anchor='e')
        
        # Scrollbar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        table_scrollbar = ttk.Scrollbar(table_frame, orient=VERTICAL, command=self.table_product.yview)
        self.table_product.configure(yscrollcommand=table_scrollbar.set)
        
        # Pack ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞ scrollbar
        self.table_product.pack(side=LEFT, fill=BOTH, expand=True)
        table_scrollbar.pack(side=RIGHT, fill=Y)
        
        # Event ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏ñ‡∏ß
        self.table_product.bind('<ButtonRelease-1>', self.on_row_select)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        self.update_table_product()
        
    def create_product_form(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°
        self.L2 = Label(parent, text='‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', font=('Arial', 14, 'bold'), bg='#f0f0f0')
        self.L2.pack(pady=15)
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
        form_frame = Frame(parent, bg='#f0f0f0')
        form_frame.pack(fill=BOTH, expand=True, padx=15)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏ö‡∏ö 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        fields = [
            ('Barcode:', self.v_barcode2),
            ('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:', self.v_title2),
            ('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó):', self.v_price2),
            ('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô (‡∏ö‡∏≤‡∏ó):', self.v_cost2),
            ('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å:', self.v_quantity2),
            ('‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà:', self.v_reorder_point2),
            ('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:', self.v_category2),
        ]
        
        self.entries = {}
        row = 0
        
        for label_text, var in fields:
            # Label (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢)
            label = Label(form_frame, text=label_text, font=('Arial', 10), bg='#f0f0f0', anchor='w')
            label.grid(row=row, column=0, sticky='w', pady=3, padx=(0, 5))
            
            # Entry (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤)
            entry = ttk.Entry(form_frame, textvariable=var, font=('Arial', 10), width=18)
            entry.grid(row=row, column=1, sticky='ew', pady=3)
            self.entries[label_text] = entry
            row += 1
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏¢ (Dropdown) - ‡πÅ‡∏ñ‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©
        Label(form_frame, text='‡∏´‡∏ô‡πà‡∏ß‡∏¢:', font=('Arial', 10), bg='#f0f0f0', anchor='w').grid(row=row, column=0, sticky='w', pady=3, padx=(0, 5))
        units = ['‡∏ä‡∏¥‡πâ‡∏ô', '‡∏•‡∏π‡∏Å', '‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', '‡∏Å‡∏£‡∏±‡∏°', '‡πÅ‡∏ú‡∏á', '‡∏Ç‡∏ß‡∏î', '‡∏ñ‡∏∏‡∏á', '‡∏Å‡∏•‡πà‡∏≠‡∏á']
        self.unit_combo = ttk.Combobox(form_frame, textvariable=self.v_unit2, 
                                      values=units, font=('Arial', 10), width=16, state='readonly')
        self.unit_combo.grid(row=row, column=1, sticky='ew', pady=3)
        row += 1
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ (Textarea) - ‡πÉ‡∏ä‡πâ 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        Label(form_frame, text='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢/‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå:', font=('Arial', 10), bg='#f0f0f0').grid(row=row, column=0, columnspan=2, sticky='w', pady=(10, 3))
        row += 1
        self.supplier_text = Text(form_frame, height=4, width=25, font=('Arial', 9))
        self.supplier_text.grid(row=row, column=0, columnspan=2, sticky='ew', pady=(0, 10))
        row += 1
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        form_frame.grid_columnconfigure(1, weight=1)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        self.create_buttons(form_frame, row)
        
        # Focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
        self.entries['Barcode:'].focus()
        
    def create_buttons(self, parent, start_row):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£"""
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
        button_frame = Frame(parent, bg='#f0f0f0')
        button_frame.grid(row=start_row, column=0, columnspan=2, sticky='ew', pady=20)
        
        # Label ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.status_label = Label(button_frame, text="", font=('Arial', 9), bg='#f0f0f0', fg='red')
        self.status_label.grid(row=0, column=0, columnspan=2, pady=(0, 10))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1
        self.btn_save = ttk.Button(button_frame, text='üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', command=self.savedata)
        self.btn_save.grid(row=1, column=0, padx=2, pady=5, sticky='ew', ipady=5)
        
        self.btn_edit = ttk.Button(button_frame, text='‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', command=self.edit_product)
        self.btn_edit.grid(row=1, column=1, padx=2, pady=5, sticky='ew', ipady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2
        self.btn_delete = ttk.Button(button_frame, text='üóëÔ∏è ‡∏•‡∏ö', command=self.delete_product)
        self.btn_delete.grid(row=2, column=0, padx=2, pady=5, sticky='ew', ipady=5)
        
        self.btn_cancel = ttk.Button(button_frame, text='‚Ü∂ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', command=self.cancel_edit)
        self.btn_cancel.grid(row=2, column=1, padx=2, pady=5, sticky='ew', ipady=5)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        button_frame.grid_columnconfigure(0, weight=1)
        button_frame.grid_columnconfigure(1, weight=1)
        
    def update_table_product(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        self.table_product.delete(*self.table_product.get_children())
        data = view_product(allfield=False)
        for d in data:
            self.table_product.insert('', 'end', values=d)
            
    def savedata(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"""
        barcode = self.v_barcode2.get()
        title = self.v_title2.get()
        price = self.v_price2.get()
        cost = self.v_cost2.get()
        quantity = self.v_quantity2.get()
        unit = self.v_unit2.get()
        category = self.v_category2.get()
        reorder_point = self.v_reorder_point2.get()
        supplier = self.supplier_text.get("1.0", END).strip()
        
        if not all([barcode, title, price, cost, quantity, unit, category, reorder_point]):
            messagebox.showerror("Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á")
            return
            
        try:
            price = float(price)
            cost = float(cost)
            quantity = int(quantity)
            reorder_point = int(reorder_point)
            
            if self.edit_mode:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                update_product(barcode, title, price, cost, quantity, unit, category, reorder_point, supplier)
                messagebox.showinfo("Success", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                self.cancel_edit()
            else:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                insert_product(barcode, title, price, cost, quantity, unit, category, reorder_point, supplier)
                messagebox.showinfo("Success", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                
                # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                self.clear_form()
                self.status_label.config(text='‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', fg='green')
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            self.update_table_product()
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            self.refresh_other_tabs()
                
            # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            self.entries['Barcode:'].focus()
            self.L2.config(text='‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà')
            self.btn_save.config(state='normal')  # Enable ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            
        except ValueError:
            messagebox.showerror("Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ó‡∏∏‡∏ô/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        except Exception as e:
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            
    def clear_form(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°"""
        self.v_barcode2.set('')
        self.v_title2.set('')
        self.v_price2.set('')
        self.v_cost2.set('')
        self.v_quantity2.set('')
        self.v_unit2.set('‡∏ä‡∏¥‡πâ‡∏ô')
        self.v_category2.set('fruit')
        self.v_reorder_point2.set('5')
        self.supplier_text.delete("1.0", END)
        
    def on_row_select(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        selection = self.table_product.selection()
        if selection:
            item = self.table_product.item(selection[0])
            values = item['values']
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
            self.v_barcode2.set(values[0])
            self.v_title2.set(values[1])
            self.v_price2.set(values[2])
            self.v_cost2.set(values[3])
            self.v_quantity2.set(values[4])
            self.v_unit2.set(values[5])
            self.v_category2.set(values[6])
            
            if len(values) >= 8:
                self.v_reorder_point2.set(values[7])
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• supplier
            try:
                product_data = get_product_by_barcode(values[0])
                if product_data and len(product_data) >= 10:
                    self.supplier_text.delete("1.0", END)
                    self.supplier_text.insert("1.0", product_data[9])
            except:
                pass  # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• supplier ‡πÑ‡∏î‡πâ
            
    def edit_product(self):
        """‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        if not self.v_barcode2.get():
            messagebox.showwarning("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
            return
            
        self.edit_mode = True
        self.current_barcode = self.v_barcode2.get()
        self.L2.config(text='‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
        self.entries['Barcode:'].config(state='disabled')  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
        
    def delete_product(self):
        """‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        if not self.v_barcode2.get():
            messagebox.showwarning("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
            return
            
        result = messagebox.askyesno("Confirm", f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {self.v_title2.get()} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
        if result:
            try:
                delete_product(self.v_barcode2.get())
                messagebox.showinfo("Success", "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                self.clear_form()
                self.update_table_product()
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö
                self.L2.config(text='‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà')
                self.btn_save.config(state='normal')  # Enable ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö
                self.status_label.config(text='‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', fg='green')
                self.entries['Barcode:'].focus()
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                self.refresh_other_tabs()
                    
            except Exception as e:
                messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                
    def cancel_edit(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
        self.edit_mode = False
        self.current_barcode = None
        self.L2.config(text='‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà')
        self.entries['Barcode:'].config(state='normal')
        self.clear_form()
        self.entries['Barcode:'].focus()
        
    def refresh_other_tabs(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ"""
        try:
            if self.sales_tab:
                self.sales_tab.refresh_product_buttons()
            if self.dashboard_tab:
                self.dashboard_tab.refresh_data()
            if self.profit_tab:
                self.profit_tab.refresh_data()
        except Exception as e:
            print(f"Error refreshing other tabs: {e}")
                
    def set_references(self, sales_tab=None, dashboard_tab=None, profit_tab=None):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß)"""
        self.sales_tab = sales_tab
        self.dashboard_tab = dashboard_tab
        self.profit_tab = profit_tab