from tkinter import *
from tkinter import ttk, messagebox
from basicsql import *

class DashboardTab(Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.pack(fill=BOTH, expand=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
        self.create_widgets()
        
    def create_widgets(self):
        FONT1 = (None, 20)
        FONT2 = (None, 14)
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        Label(self, text='Dashboard - ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô', font=FONT1).pack(pady=10)
        
        # Frame ‡∏´‡∏•‡∏±‡∏Å
        main_frame = Frame(self)
        main_frame.pack(fill=BOTH, expand=True, padx=20, pady=10)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.create_product_summary(main_frame)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        self.create_alert_section(main_frame)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        self.create_stock_table(main_frame)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        refresh_btn = ttk.Button(main_frame, text="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", command=self.refresh_data)
        refresh_btn.pack(pady=10)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        self.refresh_data()
        
    def create_product_summary(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        summary_frame = LabelFrame(parent, text="‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", font=(None, 14))
        summary_frame.pack(fill=X, pady=10)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
        self.v_total_products = StringVar()
        self.v_total_stock = StringVar()
        self.v_low_stock = StringVar()
        self.v_out_of_stock = StringVar()
        self.v_total_value = StringVar()
        
        # Grid layout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
        info_frame = Frame(summary_frame)
        info_frame.pack(padx=20, pady=15)
        
        # ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1
        Label(info_frame, text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", font=(None, 12)).grid(row=0, column=0, sticky='w', padx=10, pady=5)
        Label(info_frame, textvariable=self.v_total_products, font=(None, 12, 'bold'), fg='blue').grid(row=0, column=1, sticky='w', padx=10, pady=5)
        
        Label(info_frame, text="‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏£‡∏ß‡∏°:", font=(None, 12)).grid(row=0, column=2, sticky='w', padx=10, pady=5)
        Label(info_frame, textvariable=self.v_total_stock, font=(None, 12, 'bold'), fg='green').grid(row=0, column=3, sticky='w', padx=10, pady=5)
        
        # ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2
        Label(info_frame, text="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (‚â§ Reorder Point):", font=(None, 12)).grid(row=1, column=0, sticky='w', padx=10, pady=5)
        Label(info_frame, textvariable=self.v_low_stock, font=(None, 12, 'bold'), fg='orange').grid(row=1, column=1, sticky='w', padx=10, pady=5)
        
        Label(info_frame, text="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å:", font=(None, 12)).grid(row=1, column=2, sticky='w', padx=10, pady=5)
        Label(info_frame, textvariable=self.v_out_of_stock, font=(None, 12, 'bold'), fg='red').grid(row=1, column=3, sticky='w', padx=10, pady=5)
        
        # ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 3
        Label(info_frame, text="‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏£‡∏ß‡∏°:", font=(None, 12)).grid(row=2, column=0, sticky='w', padx=10, pady=5)
        Label(info_frame, textvariable=self.v_total_value, font=(None, 12, 'bold'), fg='purple').grid(row=2, column=1, sticky='w', padx=10, pady=5)
        
    def create_alert_section(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        alert_frame = LabelFrame(parent, text="‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", font=(None, 14))
        alert_frame.pack(fill=X, pady=10)
        
        # Listbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        self.alert_listbox = Listbox(alert_frame, height=4, font=(None, 11))
        self.alert_listbox.pack(fill=X, padx=10, pady=10)
        
    def create_stock_table(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        table_frame = LabelFrame(parent, text="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", font=(None, 14))
        table_frame.pack(fill=BOTH, expand=True, pady=10)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview ‡∏û‡∏£‡πâ‡∏≠‡∏° scrollbar
        tree_frame = Frame(table_frame)
        tree_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Headers ‡πÅ‡∏•‡∏∞ widths
        headers = ['‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î', '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô', '‡∏™‡∏ï‡πá‡∏≠‡∏Å', '‡∏´‡∏ô‡πà‡∏ß‡∏¢', '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'Reorder Point', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤']
        widths = [90, 150, 70, 70, 50, 60, 80, 80, 70, 80]
        
        self.stock_table = ttk.Treeview(tree_frame, columns=headers, show='headings', height=12)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î heading ‡πÅ‡∏•‡∏∞ column
        for header, width in zip(headers, widths):
            self.stock_table.heading(header, text=header)
            self.stock_table.column(header, width=width, anchor='center')
            
        # ‡∏à‡∏±‡∏î alignment ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        self.stock_table.column('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', anchor='w')
        self.stock_table.column('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢', anchor='e')
        self.stock_table.column('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô', anchor='e')
        self.stock_table.column('‡∏™‡∏ï‡πá‡∏≠‡∏Å', anchor='e')
        self.stock_table.column('Reorder Point', anchor='e')
        self.stock_table.column('‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤', anchor='e')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(tree_frame, orient=VERTICAL, command=self.stock_table.yview)
        self.stock_table.configure(yscrollcommand=scrollbar.set)
        
        # Pack table ‡πÅ‡∏•‡∏∞ scrollbar
        self.stock_table.pack(side=LEFT, fill=BOTH, expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)
        
    def refresh_data(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            products = view_product(allfield=True)  # ‡πÉ‡∏ä‡πâ allfield=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
            total_products = len(products)
            total_stock = 0
            low_stock_count = 0
            out_of_stock_count = 0
            total_value = 0
            alert_messages = []
            
            # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            for item in self.stock_table.get_children():
                self.stock_table.delete(item)
                
            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            for product in products:
                if len(product) >= 9:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö (‡∏£‡∏ß‡∏° reorder_point)
                    try:
                        id_val, barcode, title, price, cost, quantity, unit, category, reorder_point = product[:9]
                        
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        price = float(price)
                        cost = float(cost) 
                        quantity = int(quantity)
                        reorder_point = int(reorder_point) if reorder_point else 5
                        
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                        total_stock += quantity
                        item_value = cost * quantity
                        total_value += item_value
                        
                        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏° reorder point
                        if quantity == 0:
                            status = "‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å"
                            out_of_stock_count += 1
                            alert_messages.append(f"‚ö†Ô∏è {title} - ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å!")
                        elif quantity <= reorder_point:
                            status = "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
                            low_stock_count += 1
                            alert_messages.append(f"üîÑ {title} - ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {quantity} {unit} (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠)")
                        else:
                            status = "‡∏õ‡∏Å‡∏ï‡∏¥"
                        
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                        item_id = self.stock_table.insert('', 'end', values=[
                            barcode, title, f"{price:,.2f}", f"{cost:,.2f}", 
                            quantity, unit, category, reorder_point, status, f"{item_value:,.2f}"
                        ])
                        
                        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                        if quantity == 0:
                            self.stock_table.set(item_id, '‡∏™‡∏ï‡πá‡∏≠‡∏Å', f"{quantity} ‚ö†Ô∏è")
                        elif quantity <= reorder_point:
                            self.stock_table.set(item_id, '‡∏™‡∏ï‡πá‡∏≠‡∏Å', f"{quantity} üîÑ")
                            
                    except (ValueError, IndexError) as e:
                        # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
                        print(f"Error processing product {product}: {e}")
                        continue
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
            self.v_total_products.set(f"{total_products} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            self.v_total_stock.set(f"{total_stock:,} ‡∏ä‡∏¥‡πâ‡∏ô")
            self.v_low_stock.set(f"{low_stock_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            self.v_out_of_stock.set(f"{out_of_stock_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            self.v_total_value.set(f"{total_value:,.2f} ‡∏ö‡∏≤‡∏ó")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            self.alert_listbox.delete(0, END)
            if alert_messages:
                for msg in alert_messages[:10]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                    self.alert_listbox.insert(END, msg)
            else:
                self.alert_listbox.insert(END, "‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥")
            
        except Exception as e:
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")