from tkinter import *
from tkinter import ttk, messagebox
from basicsql import *
import json
from datetime import datetime

# Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö receipt printing
try:
    from receipt_printer import ReceiptPrinter
    RECEIPT_AVAILABLE = True
    print("‚úÖ Receipt printer module loaded")
except ImportError as e:
    RECEIPT_AVAILABLE = False
    print(f"‚ùå Receipt printer not available: {e}")

# Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö thermal printing  
try:
    from thermal_printer import ThermalPrinter
    THERMAL_AVAILABLE = True
    print("‚úÖ Thermal printer module loaded")
except ImportError as e:
    THERMAL_AVAILABLE = False
    print(f"‚ùå Thermal printer not available: {e}")

class SalesTab(Frame):
    def __init__(self, parent, product_tab=None, dashboard_tab=None, profit_tab=None):
        super().__init__(parent)
        self.pack(fill=BOTH, expand=True)
        
        # Reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        self.product_tab = product_tab
        self.dashboard_tab = dashboard_tab
        self.profit_tab = profit_tab
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        self.v_title = StringVar()
        self.v_price = StringVar()
        self.v_quantity = StringVar()
        self.v_result = StringVar()
        self.v_search = StringVar()
        
        # ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.cart = {}
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
        self.create_widgets()
        
    def create_widgets(self):
        FONT1 = (None, 20)
        FONT2 = (None, 18)
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        L1 = Label(self, text='‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢', font=FONT1)
        L1.pack()
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.F1 = Frame(self)
        self.F1.place(x=20, y=50)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.create_product_buttons()
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≤‡∏¢
        self.F2 = Frame(self)
        self.F2.place(x=350, y=50)
        
        # ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
        self.search = ttk.Entry(self.F2, textvariable=self.v_search, font=(None, 25), width=12)
        self.search.pack(pady=20)
        self.search.bind('<Return>', self.search_product)
        self.search.focus()
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≤‡∏¢
        self.create_sales_table()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
        self.create_summary_section()
        
        # ‡∏õ‡∏∏‡πà‡∏° Checkout
        self.create_checkout_button()
        
    def create_product_buttons(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        col = 0
        row = 0
        
        for i, db in enumerate(view_product(allfield=False), start=1):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
            try:
                if len(db) >= 5 and int(db[4]) <= 0:  # ‡πÅ‡∏õ‡∏•‡∏á quantity ‡πÄ‡∏õ‡πá‡∏ô int
                    continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
                    
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏™‡∏ï‡πá‡∏≠‡∏Å + ‡∏´‡∏ô‡πà‡∏ß‡∏¢
                display_text = f"{db[1]}\n({db[4]} {db[5] if len(db) >= 6 else '‡∏ä‡∏¥‡πâ‡∏ô'})" if len(db) >= 6 else db[1]
                
                B = ttk.Button(self.F1, text=display_text, 
                              command=lambda pd=db: self.button_insert(pd[0], pd[1], pd[2], 1))
                B.grid(row=row, column=col, ipadx=10, ipady=20, padx=5, pady=5)
                col = col + 1
                if i % 3 == 0:
                    col = 0
                    row = row + 1
            except (ValueError, IndexError):
                # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
                B = ttk.Button(self.F1, text=db[1] if len(db) > 1 else "Unknown", 
                              command=lambda pd=db: self.button_insert(pd[0], pd[1], pd[2], 1))
                B.grid(row=row, column=col, ipadx=10, ipady=20, padx=5, pady=5)
                col = col + 1
                if i % 3 == 0:
                    col = 0
                    row = row + 1
                
    def create_sales_table(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"""
        # Style
        style = ttk.Style()
        style.configure('Treeview.Heading', font=(None, 12))
        
        sales_header = ['barcode', 'title', 'price', 'quantity', 'total']
        sales_width = [120, 180, 70, 70, 80]
        
        self.table_sales = ttk.Treeview(self.F2, columns=sales_header, 
                                       show='headings', height=8)
        self.table_sales.pack()
        
        for hd, w in zip(sales_header, sales_width):
            self.table_sales.heading(hd, text=hd)
            self.table_sales.column(hd, width=w, anchor='center')
            
        self.table_sales.column('title', anchor='w')
        self.table_sales.column('price', anchor='e')
        self.table_sales.column('quantity', anchor='e')
        self.table_sales.column('total', anchor='e')
        
    def create_summary_section(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"""
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
        self.F3 = Frame(self.F2)
        self.F3.pack(pady=10, fill=X)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î
        self.v_subtotal = StringVar()
        self.v_vat = StringVar()
        self.v_grand_total = StringVar()
        
        # Labels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î
        Label(self.F3, text="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (Subtotal):", font=(None, 12)).grid(row=0, column=0, sticky='e', padx=5)
        Label(self.F3, textvariable=self.v_subtotal, font=(None, 12, 'bold'), width=15, anchor='e').grid(row=0, column=1, sticky='e', padx=5)
        
        Label(self.F3, text="VAT 7%:", font=(None, 12)).grid(row=1, column=0, sticky='e', padx=5)
        Label(self.F3, textvariable=self.v_vat, font=(None, 12, 'bold'), width=15, anchor='e').grid(row=1, column=1, sticky='e', padx=5)
        
        # ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á
        ttk.Separator(self.F3, orient='horizontal').grid(row=2, column=0, columnspan=2, sticky='ew', pady=5)
        
        Label(self.F3, text="‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Grand Total):", font=(None, 14, 'bold')).grid(row=3, column=0, sticky='e', padx=5)
        Label(self.F3, textvariable=self.v_grand_total, font=(None, 14, 'bold'), fg='red', width=15, anchor='e').grid(row=3, column=1, sticky='e', padx=5)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏¢‡∏≠‡∏î 0
        self.update_summary()
        
    def create_checkout_button(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Checkout ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        self.F4 = Frame(self.F2)
        self.F4.pack(pady=10, fill=X)
        
        # ‡∏õ‡∏∏‡πà‡∏° Checkout ‡∏´‡∏•‡∏±‡∏Å
        self.btn_checkout = ttk.Button(self.F4, text="üí≥ CHECKOUT", 
                                      command=self.open_checkout_window,
                                      style='Checkout.TButton')
        self.btn_checkout.pack(fill=X, ipady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        test_frame = Frame(self.F4)
        test_frame.pack(fill=X, pady=(10, 0))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF
        if RECEIPT_AVAILABLE:
            self.btn_test_pdf = ttk.Button(test_frame, text="üìÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF", 
                                          command=self.test_pdf_receipt)
            self.btn_test_pdf.pack(side=LEFT, padx=2, fill=X, expand=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thermal
        if THERMAL_AVAILABLE:
            self.btn_test_thermal = ttk.Button(test_frame, text="üñ®Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thermal", 
                                              command=self.test_thermal_printer)
            self.btn_test_thermal.pack(side=RIGHT, padx=2, fill=X, expand=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á styles
        style = ttk.Style()
        style.configure('Checkout.TButton', font=(None, 16, 'bold'))
        
    def calculate_totals(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        subtotal = 0
        for item in self.cart.values():
            price = float(item[2])
            quantity = int(item[3])
            subtotal += price * quantity
            
        vat = subtotal * 0.07  # VAT 7%
        grand_total = subtotal + vat
        
        return subtotal, vat, grand_total
        
    def update_summary(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°"""
        subtotal, vat, grand_total = self.calculate_totals()
        
        self.v_subtotal.set(f"{subtotal:,.2f} ‡∏ö‡∏≤‡∏ó")
        self.v_vat.set(f"{vat:,.2f} ‡∏ö‡∏≤‡∏ó")
        self.v_grand_total.set(f"{grand_total:,.2f} ‡∏ö‡∏≤‡∏ó")
        
    def update_table_with_totals(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        self.table_sales.delete(*self.table_sales.get_children())
        
        for item in self.cart.values():
            barcode = item[0]
            title = item[1]
            price = float(item[2])
            quantity = int(item[3])
            total = price * quantity
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
            self.table_sales.insert('', 'end', values=[barcode, title, f"{price:,.2f}", quantity, f"{total:,.2f}"])
            
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
        self.update_summary()
        
    def button_insert(self, b, t, p, q=1):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
        product_data = get_product_by_barcode(b)
        if product_data and len(product_data) >= 7:
            try:
                available_stock = int(product_data[5])  # ‡πÅ‡∏õ‡∏•‡∏á quantity ‡πÄ‡∏õ‡πá‡∏ô int
                current_qty = self.cart[b][3] if b in self.cart else 0
                
                if current_qty >= available_stock:
                    messagebox.showwarning("Warning", f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {t} ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {available_stock} ‡∏ä‡∏¥‡πâ‡∏ô")
                    return
            except (ValueError, IndexError):
                # ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠ index ‡∏ú‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
                pass
        
        if b not in self.cart:
            self.cart[b] = [b, t, p, q]
        else:
            self.cart[b][3] = self.cart[b][3] + 1
            
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        self.update_table_with_totals()
            
    def search_product(self, event=None):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î"""
        barcode = self.v_search.get()
        try:
            data = search_barcode(barcode)
            if data:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
                if len(data) >= 5:
                    try:
                        available_stock = int(data[4])  # ‡πÅ‡∏õ‡∏•‡∏á quantity ‡πÄ‡∏õ‡πá‡∏ô int
                        current_qty = self.cart[data[0]][3] if data[0] in self.cart else 0
                        
                        if current_qty >= available_stock:
                            messagebox.showwarning("Warning", f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {data[1]} ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {available_stock} ‡∏ä‡∏¥‡πâ‡∏ô")
                            self.v_search.set('')
                            self.search.focus()
                            return
                    except (ValueError, IndexError):
                        # ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
                        pass
                
                if data[0] not in self.cart:
                    self.cart[data[0]] = [data[0], data[1], data[2], 1]
                else:
                    self.cart[data[0]][3] = self.cart[data[0]][3] + 1
                    
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
                self.update_table_with_totals()
                    
                self.v_search.set('')  # clear data
                self.search.focus()  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            else:
                messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ")
                self.v_search.set('')
                self.search.focus()
        except Exception as e:
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            self.v_search.set('')
            self.search.focus()
            
    def open_checkout_window(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Checkout"""
        if not self.cart:
            messagebox.showwarning("Warning", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
            return
            
        subtotal, vat, grand_total = self.calculate_totals()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Checkout
        checkout_window = Toplevel(self)
        checkout_window.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô - Checkout")
        checkout_window.geometry("600x700")
        checkout_window.transient(self.master)
        checkout_window.grab_set()
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        checkout_window.update_idletasks()
        x = (checkout_window.winfo_screenwidth() // 2) - (600 // 2)
        y = (checkout_window.winfo_screenheight() // 2) - (700 // 2)
        checkout_window.geometry(f"600x700+{x}+{y}")
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        Label(checkout_window, text="‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", font=(None, 20, 'bold')).pack(pady=10)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
        summary_frame = LabelFrame(checkout_window, text="‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢", font=(None, 14))
        summary_frame.pack(padx=20, pady=10, fill=X)
        
        Label(summary_frame, text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {subtotal:,.2f} ‡∏ö‡∏≤‡∏ó", font=(None, 12)).pack(anchor='w', padx=10, pady=2)
        Label(summary_frame, text=f"VAT 7%: {vat:,.2f} ‡∏ö‡∏≤‡∏ó", font=(None, 12)).pack(anchor='w', padx=10, pady=2)
        Label(summary_frame, text=f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {grand_total:,.2f} ‡∏ö‡∏≤‡∏ó", font=(None, 16, 'bold'), fg='red').pack(anchor='w', padx=10, pady=5)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
        payment_frame = LabelFrame(checkout_window, text="‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", font=(None, 14))
        payment_frame.pack(padx=20, pady=10, fill=X)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö
        received_var = StringVar()
        received_var.set("0")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö
        Label(payment_frame, text="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö:", font=(None, 12)).pack(anchor='w', padx=10)
        received_label = Label(payment_frame, textvariable=received_var, font=(None, 20, 'bold'), fg='blue')
        received_label.pack(anchor='w', padx=10, pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£
        bills_frame = Frame(payment_frame)
        bills_frame.pack(padx=10, pady=10, fill=X)
        
        bills = [20, 50, 100, 500, 1000]
        
        def add_bill(amount):
            current = float(received_var.get().replace(',', ''))  # ‡∏•‡∏ö‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            new_amount = current + amount
            received_var.set(f"{new_amount:,.0f}")
            update_change()
        
        def clear_received():
            received_var.set("0")
            update_change()
            
        Label(bills_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£:", font=(None, 12)).pack(anchor='w')
        
        buttons_frame = Frame(bills_frame)
        buttons_frame.pack(fill=X, pady=5)
        
        for i, bill in enumerate(bills):
            btn = ttk.Button(buttons_frame, text=f"{bill:,}", width=8,
                           command=lambda b=bill: add_bill(b))
            btn.grid(row=0, column=i, padx=2, pady=2)
            
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
        ttk.Button(buttons_frame, text="‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå", command=clear_received).grid(row=0, column=len(bills), padx=10)
        
        # ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏≠‡∏á
        manual_frame = Frame(payment_frame)
        manual_frame.pack(padx=10, pady=5, fill=X)
        
        Label(manual_frame, text="‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:", font=(None, 12)).pack(anchor='w')
        manual_entry = ttk.Entry(manual_frame, font=(None, 14), width=15)
        manual_entry.pack(anchor='w', pady=2)
        
        def add_manual():
            try:
                amount = float(manual_entry.get().replace(',', ''))  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ
                current = float(received_var.get().replace(',', ''))
                new_amount = current + amount
                received_var.set(f"{new_amount:,.0f}")
                manual_entry.delete(0, END)
                update_change()
            except ValueError:
                messagebox.showerror("Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                
        ttk.Button(manual_frame, text="‡πÄ‡∏û‡∏¥‡πà‡∏°", command=add_manual).pack(anchor='w', pady=2)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô
        change_frame = LabelFrame(checkout_window, text="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô", font=(None, 14))
        change_frame.pack(padx=20, pady=10, fill=X)
        
        change_var = StringVar()
        change_var.set("0.00")
        
        Label(change_frame, text="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô:", font=(None, 12)).pack(anchor='w', padx=10)
        change_label = Label(change_frame, textvariable=change_var, font=(None, 24, 'bold'), fg='green')
        change_label.pack(anchor='w', padx=10, pady=5)
        
        def update_change():
            try:
                received = float(received_var.get().replace(',', ''))
                change = received - grand_total
                if change >= 0:
                    change_var.set(f"{change:,.2f} ‡∏ö‡∏≤‡∏ó")
                    change_label.config(fg='green')
                else:
                    change_var.set(f"{abs(change):,.2f} ‡∏ö‡∏≤‡∏ó (‡∏Ç‡∏≤‡∏î)")
                    change_label.config(fg='red')
            except:
                change_var.set("0.00 ‡∏ö‡∏≤‡∏ó")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        buttons_frame_bottom = Frame(checkout_window)
        buttons_frame_bottom.pack(padx=20, pady=20, fill=X)
        
        def save_transaction():
            try:
                received = float(received_var.get().replace(',', ''))
                change = received - grand_total
                
                if received < grand_total:
                    messagebox.showerror("Error", "‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
                    return
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction ID
                transaction_id = generate_transaction_id()
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON
                items_data = json.dumps(list(self.cart.values()))
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                insert_transaction(transaction_id, subtotal, vat, grand_total, received, change, items_data)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å
                for item in self.cart.values():
                    barcode = item[0]
                    quantity = item[3]
                    update_stock(barcode, quantity)
                
                # ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á checkout ‡∏Å‡πà‡∏≠‡∏ô
                checkout_window.destroy()
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
                self.show_print_options(transaction_id, subtotal, vat, grand_total, received, change)
                
                # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                self.clear_cart()
                
                # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö
                self.refresh_all_tabs()
                
            except Exception as e:
                messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        
        def cancel_checkout():
            checkout_window.destroy()
        
        ttk.Button(buttons_frame_bottom, text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", command=save_transaction, 
                  style='Success.TButton').pack(side=LEFT, padx=5, fill=X, expand=True, ipady=10)
        ttk.Button(buttons_frame_bottom, text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", command=cancel_checkout,
                  style='Cancel.TButton').pack(side=RIGHT, padx=5, fill=X, expand=True, ipady=10)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á styles
        style = ttk.Style()
        style.configure('Success.TButton', font=(None, 14, 'bold'))
        style.configure('Cancel.TButton', font=(None, 14))
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô
        update_change()

    def show_print_options(self, transaction_id, subtotal, vat, grand_total, received_amount, change_amount):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå"""
        print_window = Toplevel(self)
        print_window.title("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à")
        print_window.geometry("500x400")
        print_window.transient(self.master)
        print_window.grab_set()
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        print_window.update_idletasks()
        x = (print_window.winfo_screenwidth() // 2) - (250)
        y = (print_window.winfo_screenheight() // 2) - (200)
        print_window.geometry(f"500x400+{x}+{y}")
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        Label(print_window, text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! üéâ", 
              font=('Arial', 16, 'bold'), fg='green').pack(pady=20)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        info_frame = Frame(print_window, bg='#f0f0f0', relief=RIDGE, bd=2)
        info_frame.pack(fill=X, padx=20, pady=10)
        
        Label(info_frame, text=f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {transaction_id}", 
              font=('Arial', 12, 'bold'), bg='#f0f0f0').pack(pady=5)
        Label(info_frame, text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {grand_total:,.2f} ‡∏ö‡∏≤‡∏ó", 
              font=('Arial', 11), bg='#f0f0f0').pack(pady=2)
        Label(info_frame, text=f"‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: {change_amount:,.2f} ‡∏ö‡∏≤‡∏ó", 
              font=('Arial', 11), bg='#f0f0f0').pack(pady=2)
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
        Label(print_window, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à:", 
              font=('Arial', 14, 'bold')).pack(pady=(20, 10))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
        button_frame = Frame(print_window)
        button_frame.pack(pady=20, fill=X, padx=20)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö callback
        transaction_data = {
            'transaction_id': transaction_id,
            'subtotal': subtotal,
            'vat': vat,
            'grand_total': grand_total,
            'received_amount': received_amount,
            'change_amount': change_amount
        }
        
        cart_items = list(self.cart.values())
        
        # ‡∏õ‡∏∏‡πà‡∏° Export PDF
        if RECEIPT_AVAILABLE:
            pdf_btn = Button(button_frame, 
                            text="üìÑ Export PDF\n(‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏ô‡∏≤‡∏î A4)",
                            command=lambda: self.export_pdf_receipt(transaction_data, cart_items, print_window),
                            bg='#4CAF50', fg='white', font=('Arial', 11, 'bold'),
                            height=3, width=20)
            pdf_btn.pack(side=LEFT, padx=10, pady=5, fill=X, expand=True)
        else:
            Label(button_frame, text="PDF ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ\n(‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á reportlab)", 
                  fg='red', font=('Arial', 9)).pack(side=LEFT, padx=10)
        
        # ‡∏õ‡∏∏‡πà‡∏° Thermal Print
        if THERMAL_AVAILABLE:
            thermal_btn = Button(button_frame,
                               text="üñ®Ô∏è Print Receipt\n(Thermal Printer 80mm)",
                               command=lambda: self.print_thermal_receipt(transaction_data, cart_items, print_window),
                               bg='#2196F3', fg='white', font=('Arial', 11, 'bold'),
                               height=3, width=20)
            thermal_btn.pack(side=RIGHT, padx=10, pady=5, fill=X, expand=True)
        else:
            Label(button_frame, text="Thermal Printer ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ\n(‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pywin32)", 
                  fg='red', font=('Arial', 9)).pack(side=RIGHT, padx=10)
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        options_frame = Frame(print_window)
        options_frame.pack(pady=20, fill=X, padx=20)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
        if RECEIPT_AVAILABLE and THERMAL_AVAILABLE:
            both_btn = Button(options_frame,
                             text="üìÑüñ®Ô∏è Export PDF ‡πÅ‡∏•‡∏∞ Print Receipt",
                             command=lambda: self.export_and_print_both(transaction_data, cart_items, print_window),
                             bg='#FF9800', fg='white', font=('Arial', 11, 'bold'),
                             height=2)
            both_btn.pack(fill=X, pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏°
        skip_btn = Button(options_frame,
                         text="‡∏Ç‡πâ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)",
                         command=print_window.destroy,
                         font=('Arial', 10),
                         height=2)
        skip_btn.pack(fill=X, pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
        if THERMAL_AVAILABLE:
            test_frame = Frame(print_window)
            test_frame.pack(pady=10)
            
            test_btn = Button(test_frame,
                             text="üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thermal Printer",
                             command=self.test_thermal_printer,
                             font=('Arial', 9))
            test_btn.pack()

    def export_pdf_receipt(self, transaction_data, cart_items, parent_window):
        """Export ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏õ‡πá‡∏ô PDF"""
        try:
            printer = ReceiptPrinter()
            filename = printer.print_receipt_from_transaction(
                transaction_id=transaction_data['transaction_id'],
                subtotal=transaction_data['subtotal'],
                vat=transaction_data['vat'],
                grand_total=transaction_data['grand_total'],
                received_amount=transaction_data['received_amount'],
                change_amount=transaction_data['change_amount'],
                cart_items=cart_items
            )
            
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                               f"Export PDF ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n"
                               f"‡πÑ‡∏ü‡∏•‡πå: {filename}\n"
                               f"‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
            parent_window.destroy()
            
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                               f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Export PDF ‡πÑ‡∏î‡πâ:\n{str(e)}")

    def print_thermal_receipt(self, transaction_data, cart_items, parent_window):
        """‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ Thermal Printer"""
        try:
            printer = ThermalPrinter()
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö thermal printer
            transaction_data['datetime'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            success = printer.print_receipt(transaction_data, cart_items)
            
            if success:
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                                   f"‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n"
                                   f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {transaction_data['transaction_id']}")
                parent_window.destroy()
            
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                               f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ:\n{str(e)}\n\n"
                               f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n"
                               f"‚Ä¢ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß\n"
                               f"‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pywin32\n"
                               f"‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå")

    def export_and_print_both(self, transaction_data, cart_items, parent_window):
        """Export PDF ‡πÅ‡∏•‡∏∞ Print Thermal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
        try:
            # Export PDF ‡∏Å‡πà‡∏≠‡∏ô
            pdf_printer = ReceiptPrinter()
            pdf_filename = pdf_printer.print_receipt_from_transaction(
                transaction_id=transaction_data['transaction_id'],
                subtotal=transaction_data['subtotal'],
                vat=transaction_data['vat'],
                grand_total=transaction_data['grand_total'],
                received_amount=transaction_data['received_amount'],
                change_amount=transaction_data['change_amount'],
                cart_items=cart_items
            )
            
            # Print Thermal
            thermal_printer = ThermalPrinter()
            transaction_data['datetime'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            thermal_printer.print_receipt(transaction_data, cart_items)
            
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                               f"Export PDF ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n"
                               f"PDF: {pdf_filename}\n"
                               f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {transaction_data['transaction_id']}")
            parent_window.destroy()
            
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                               f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n{str(e)}")

    def test_thermal_printer(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Thermal Printer"""
        try:
            printer = ThermalPrinter()
            success, message = printer.test_printer()
            
            if success:
                messagebox.showinfo("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‚úÖ {message}")
            else:
                messagebox.showerror("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"‚ùå {message}")
                
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ:\n{str(e)}")

    def test_pdf_receipt(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF Receipt"""
        if not self.cart:
            messagebox.showwarning("Warning", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            return
        
        try:
            subtotal, vat, grand_total = self.calculate_totals()
            
            printer = ReceiptPrinter()
            filename = printer.print_receipt_from_transaction(
                transaction_id="TEST_PDF",
                subtotal=subtotal,
                vat=vat,
                grand_total=grand_total,
                received_amount=grand_total + 100,
                change_amount=100,
                cart_items=list(self.cart.values())
            )
            
            messagebox.showinfo("‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n‡πÑ‡∏ü‡∏•‡πå: {filename}")
            
        except Exception as e:
            messagebox.showerror("‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n{str(e)}")
        
    def clear_cart(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        self.cart.clear()
        self.update_table_with_totals()
        self.search.focus()
        
    def refresh_all_tabs(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"""
        try:
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡∏≤‡∏¢
            self.refresh_product_buttons()
            
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Product
            if self.product_tab:
                self.product_tab.update_table_product()
                
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Dashboard
            if self.dashboard_tab:
                self.dashboard_tab.refresh_data()
                
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Profit Tab
            if self.profit_tab:
                self.profit_tab.refresh_data()
                
            print("All tabs refreshed after checkout")
            
        except Exception as e:
            print(f"Error refreshing tabs: {str(e)}")
            
    def set_references(self, product_tab=None, dashboard_tab=None, profit_tab=None):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß)"""
        self.product_tab = product_tab
        self.dashboard_tab = dashboard_tab
        self.profit_tab = profit_tab
            
    def refresh_product_buttons(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà"""
        # ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πà‡∏≤
        for widget in self.F1.winfo_children():
            widget.destroy()
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        self.create_product_buttons()